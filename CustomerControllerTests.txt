import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.boot.test.mock.mockito.MockBean;

@WebMvcTest(CustomerController.class)
public class CustomerControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CustomerService customerService;

    @BeforeEach
    void setUp() {
       

    @Test
    public void testRegisterCustomer_Success() throws Exception {
        String customerJson = "{\"name\":\"Alice\", \"email\":\"alice@example.com\"}";

        mockMvc.perform(post("/api/customers")
                .contentType(MediaType.APPLICATION_JSON)
                .content(customerJson))
                .andExpect(status().isCreated());
    }

    @Test
    public void testRegisterCustomer_DuplicateEmail() throws Exception {
        String customerJson = "{\"name\":\"Bob\", \"email\":\"alice@example.com\"}";

        when(customerService.register(any())).thenThrow(new RuntimeException("Email already exists."));

        mockMvc.perform(post("/api/customers")
                .contentType(MediaType.APPLICATION_JSON)
                .content(customerJson))
                .andExpect(status().isBadRequest())
                .andExpect(content().string("Email already exists."));
    }
}

Customer login

@Test
public void testLoginCustomer_Success() throws Exception {
    String loginJson = "{\"email\":\"alice@example.com\"}";

    when(customerService.login(anyString())).thenReturn("valid-token");

    mockMvc.perform(post("/api/customers/login")
            .contentType(MediaType.APPLICATION_JSON)
            .content(loginJson))
            .andExpect(status().isOk())
            .andExpect(content().string("valid-token"));
}

@Test
public void testLoginCustomer_NotFound() throws Exception {
    String loginJson = "{\"email\":\"unknown@example.com\"}";

    when(customerService.login(anyString())).thenThrow(new RuntimeException("Customer not found."));

    mockMvc.perform(post("/api/customers/login")
            .contentType(MediaType.APPLICATION_JSON)
            .content(loginJson))
            .andExpect(status().isNotFound())
            .andExpect(content().string("Customer not found."));
}

Transaction management 

@Test
public void testAddTransaction_Success() throws Exception {
    String transactionJson = "{\"amount\":120.00, \"date\":\"2024-01-15\"}";

    mockMvc.perform(post("/api/customers/1/transactions")
            .contentType(MediaType.APPLICATION_JSON)
            .content(transactionJson))
            .andExpect(status().isCreated());
}

@Test
public void testGetTransactions_Success() throws Exception {
    mockMvc.perform(get("/api/customers/1/transactions"))
            .andExpect(status().isOk());
}

Reward point calculation 

@Test
public void testCalculateRewardPoints() {
    RewardService rewardService = new RewardService();

    int pointsFor120 = rewardService.calculateRewardPoints(120.00);
    assertEquals(90, pointsFor120);

    int pointsFor80 = rewardService.calculateRewardPoints(80.00);
    assertEquals(30, pointsFor80);

    int pointsFor150 = rewardService.calculateRewardPoints(150.00);
    assertEquals(200, pointsFor150);
}


@Test
public void testAddTransaction_InvalidAmount() throws Exception {
    String transactionJson = "{\"amount\":-50.00, \"date\":\"2024-01-15\"}";

    mockMvc.perform(post("/api/customers/1/transactions")
            .contentType(MediaType.APPLICATION_JSON)
            .content(transactionJson))
            .andExpect(status().isBadRequest())
            .andExpect(content().string("Invalid transaction amount."));
}

@Test
public void testGetRewardsForNonExistingCustomer() throws Exception {
    mockMvc.perform(get("/api/customers/999/rewards"))
            .andExpect(status().isNotFound())
            .andExpect(content().string("Customer not found."));
}
